/* list */
li {
  margin-left: 0.2em;
  margin-bottom: var(--baseline);
}
li > p + ul,
li > p + ol {
  /* <ul>|<ol> inside <li> that directly follows a <p> */
  /* shave off 1 baseline from space in between paragraph and list */
  margin-top: calc(var(--baseline) * -1);
}
li.task-list-item {
  list-style-type: none;
}
li.task-list-item > input[type="checkbox"] {
  list-style: none;
  margin-right: 0.5em;
  margin-left: -1.4em;
  background: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 1.5em;
  height: var(--baseline);
  display: inline-block;
  position: relative;
  border: none;
  opacity: 1;

  --outlineSvgUrl: url('data:image/svg+xml;utf8,<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><rect x="1.75" y="1.75" width="14.5" height="14.5" rx="0.5" stroke="black" stroke-width="1.5"/></svg>');
  --checkSvgUrl: url('data:image/svg+xml;utf8,<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4.7 9.3L8.1 12.6L13.8 6.9L12.3 5.3L8.1 9.5L6.3 7.7L4.7 9.3Z" fill="black"/></svg>');
}
li.task-list-item > input[type="checkbox"]:before,
li.task-list-item > input[type="checkbox"]:after {
  display: block;
  position: absolute;
  content: "X";
  color: transparent;
  left: 0;
  top: -0.25em;
  bottom: -0.25em;
  width: 1.1em;
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
  --webkit-touch-callout: none;
}
li.task-list-item > input[type="checkbox"]:after {
  /* box aligned with checkmark */
  background-image: var(--outlineSvgUrl);
}
li.task-list-item > input[type="checkbox"][checked]:before {
  /* checkmark aligned with box */
  background-image: var(--checkSvgUrl);
}
@supports (
  (-webkit-mask-image: linear-gradient(rgba(0, 0, 0, 1), red)) or
    (mask-image: linear-gradient(rgba(0, 0, 0, 1), red))
) {
  /* use mask so that check boxes matches --foreground-color */
  li.task-list-item > input[type="checkbox"]:before,
  li.task-list-item > input[type="checkbox"]:after {
    -webkit-mask-size: contain;
    mask-size: contain;
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-position: center center;
    mask-position: center center;
  }
  li.task-list-item > input[type="checkbox"]:after {
    /* box aligned with checkmark */
    background: var(--foreground-color);
    -webkit-mask-image: var(--outlineSvgUrl);
    mask-image: var(--outlineSvgUrl);
  }

  li.task-list-item > input[type="checkbox"][checked]:before {
    /* checkmark aligned with box */
    background: var(--foreground-color);
    -webkit-mask-image: var(--checkSvgUrl);
    mask-image: var(--checkSvgUrl);
  }
}
.compact > li > p + ul,
.compact > li > p + ol {
  /* like above but for lists inside compact lists */
  margin-top: calc(var(--blockSpacingBottom) * -1);
}
ul,
ol {
  list-style-position: outside;
  --list-indentation: 2em;
}
ul.compact > li,
ol.compact > li {
  margin-bottom: 0;
}
ul {
  padding-left: 1.3em;
}
/* custom start number -- undo reset */
ol[start] {
  -webkit-padding-start: var(--list-indentation);
  padding-inline-start: var(--list-indentation);
  /*list-style-position: inside;*/
  /*& li {
    color: red;
  }*/
}
ol:not([start]) {
  list-style: none;
  counter-reset: ol-counter;
  padding-left: var(--list-indentation);
}
ol:not([start]) > li {
  counter-increment: ol-counter;
  position: relative;
}
ol:not([start]) > li::before {
  content: counter(ol-counter) ". ";
  font-weight: 500;
  font-variant-numeric: tabular-nums;
  position: absolute;
  --space: 0.5em;
  --width: calc(var(--list-indentation) - var(--space));
  left: calc(-1 * calc(var(--width) + var(--space)));
  width: var(--width);
  height: var(--lineHeight);
  text-align: left;
}
